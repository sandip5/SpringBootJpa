package com.sandip.spring.hibernatejpa.hibernatejpa.repository;

import com.sandip.spring.hibernatejpa.hibernatejpa.entity.Course;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;

@Repository
@Transactional
public class StudentRepository {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    EntityManager em;

    public Student findById(long id) {
        return em.find(Student.class, id);
    }

    public void deleteById(int id) {
        em.remove(findById(id));
    }

    public Student save(Student student) {
        if(student.getId() == null) {
            em.persist(student);
        } else {
            em.merge(student);
        }
        return student;
    }

    public void playWithEntityManager() {
        logger.info("Play With Entity Manager");
        Student student1 = new Student("JSP");
        em.persist(student1);
        Student student2 = new Student("SERVLET");
        em.persist(student2);
//        em.detach(course1);
        em.flush();
//        em.clear();
        student1.setName("Updated JSP");
        em.clear();
        student2.setName("Updated Servlet");
        em.flush();

        Student student3 = new Student("Microservices");
        em.persist(student3);
        student3.setName("Microservices - Updated");
        Student student4 = findById(1);
        student4.setName("JDBC - Updated");

    }
}

SELECT * FROM STUDENT_COURSE , STUDENT, COURSE WHERE STUDENT_COURSE.STUDENT_ID=STUDENT.ID AND STUDENT_COURSE.COURSE_ID=COURSE.ID

  select
        employee0_.id as id1_1_,
        employee0_.name as name2_1_,
        employee0_1_.full_time_employee_wage as full_tim1_2_,
        employee0_2_.part_time_employee_wage as part_tim1_3_,
        case
            when employee0_1_.id is not null then 1
            when employee0_2_.id is not null then 2
            when employee0_.id is not null then 0
        end as clazz_
    from
        employee employee0_
    left outer join
        full_time_employee employee0_1_
            on employee0_.id=employee0_1_.id
    left outer join
        part_time_employee employee0_2_
            on employee0_.id=employee0_2_.id

            @Transactional(isolation = Isolation.READ_COMMITTED)